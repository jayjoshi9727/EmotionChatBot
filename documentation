# Emotionally Intelligent Chatbot

This is a readme file our Chatbot. It is a machine-learning based chatbot that detects human emotions. 

# Requirements to run the code

.NET FRAMEWORK 3.4
ML.NET Core Library
Nugget Packet Manager 
SDK 4
Python 3.6
Bot Framework Emulators

# Here the step by step procedure of project is explained along with the source code. 
# This code is for Python. 

# Code for loading and Understanding the data

  "source": [
    "import pandas as pd \n",
    "dataFrame=pd.read_csv(\"DATA.csv\",encoding='utf-8')\n",
    "x=dataFrame.values[:,1]\n",
    "y=dataFrame.values[:,0]\n",
    "print(dataFrame.head())\n",
    "print(dataFrame.info())\n",
    "print(x.shape)\n",
    "print(y.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   Emotion_value                                          Text_data\n",
      "0              0  [ On days when I feel close to my partner and ...\n",
      "1              1  Every time I imagine that someone I love or I ...\n",
      "2              2  When I had been obviously unjustly treated and...\n",
      "3              3  When I think about the short time that we live...\n",
      "4              4  At a gathering I found myself involuntarily si...\n",
      "['on', 'days', 'when', 'i', 'feel', 'close', 'to', 'my', 'partner', 'and', 'other', 'friends', 'when', 'i', 'feel', 'at', 'peace', 'with', 'myself', 'and', 'also', 'experience', 'a', 'close', 'contact', 'with', 'people', 'whom', 'i', 'regard', 'greatly']\n"
     ]
    }
   ],

# Preprocessing the data

"source": [
    "# ------Preprocessing textual data--------\n",
    "import string\n",
    "from keras.preprocessing.text import text_to_word_sequence\n",
    "from keras.preprocessing.text import Tokenizer\n",
    "from keras.preprocessing.sequence import pad_sequences\n",
    "text_lines = list()\n",
    "spell=Speller(lang='en')\n",
    "encode={\"joy\":0,\"fear\":1,\"anger\":2,\"sadness\":3,\"disgust\":4,\"shame\":5,\"guilt\":6}\n",
    "data_copy=pd.read_csv('DATA.csv',encoding='utf-8')\n",
    "data_copy['Emotion_value']=data_copy['Emotion_value'].apply(lambda x: encode[x])\n",
    "print(data_copy.head())\n",
    "lines = dataFrame[\"Text_data\"]\n",
    "for line in lines:\n",

# Correcting incorrect spelling

  
    "    spellings=spell(line)\n",

# Creating tokens
   
    "    tokens = word_tokenize(spellings)\n",
    "    tokens = [w.lower() for w in tokens]\n",
    
# Remove punctuations\n",
    "    table = str.maketrans('', '', string.punctuation)\n",
    "    stripped = [w.translate(table) for w in tokens]\n",
    
# Removing non alphabetic characters

    "    words = [word for word in stripped if word.isalpha()]\n",
    "    text_lines.append(words)\n",
    
# Print first preprocessed statement

    "print(text_lines[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[19, 184, 8, 1, 106, 94, 4, 5, 831, 6, 85, 55, 8, 1, 106, 18, 2665, 16, 129, 6, 205, 585, 3, 94, 651, 16, 63, 161, 1, 2263, 1756]\n",
      "Unique tokens 8656\n",
      "Vocab_size 8657\n",
      "(7652, 50)\n",
      "[  19  184    8    1  106   94    4    5  831    6   85   55    8    1\n",
      "  106   18 2665   16  129    6  205  585    3   94  651   16   63  161\n",
      "    1 2263 1756    0    0    0    0    0    0    0    0    0    0    0\n",
      "    0    0    0    0    0    0    0    0]\n",
      "[ 28 279   1  65  40  16  51  55   9  77 335   1   7 563   4 416  18  54\n",
      "  16   5 191 100  42  68   0   0   0   0   0   0   0   0   0   0   0   0\n",
      "   0   0   0   0   0   0   0   0   0   0   0   0   0   0]\n",
      "[0. 0. 0. 0. 0. 0. 1.]\n"
     ]
    }

# Code for Train-test

 "source": [
    "validation_split=0.2 #20% percent of data will be used as validation and 80% for training\n",
    "max_length=50 #Maximum number of words that can occur in one sentence.\n",
    "\n",
    "tokenizer_obj=Tokenizer()\n",
    "tokenizer_obj.fit_on_texts(text_lines)\n",
    "sequences=tokenizer_obj.texts_to_sequences(text_lines)\n",
    "print(sequences[0])\n",
    "\n",

# For printing ubique tokens

    "word_index=tokenizer_obj.word_index\n",
    "print(\"Unique tokens \" + str(len(word_index)))\n",
    "\n",
    "#print vocab size\n",
    "vocab_size=len(tokenizer_obj.word_index)+1\n",
    "print(\"Vocab_size \"+ str(vocab_size))\n",
    "\n",

# How to do extra padding for sentences having lengths greater than 50

    "lines_pad=pad_sequences(sequences,maxlen=max_length,padding='post')\n",
    "print(lines_pad.shape)\n",
    "print(lines_pad[0])\n",
    "category=data_copy['Emotion_value'].values\n",
    "\n",
    "# Creating one hot encodings for output labels\n",
    "indices=np.arange(lines_pad.shape[0])\n",
    "np.random.shuffle(indices)\n",
    "lines_pad=lines_pad[indices]\n",
    "category=category[indices]\n",
    "\n",
    "n_values = np.max(category) + 1\n",
    "Y=np.eye(n_values)[category]\n",
    "\n",

# How to train rest and split 

    "num_validation_samples=int(validation_split*lines_pad.shape[0])\n",
    "X_train_pad=lines_pad[:-num_validation_samples]\n",
    "print(X_train_pad[0])\n",
    "y_train=Y[:-num_validation_samples]\n",
    "print(y_train[0])\n",
    "X_test_pad=lines_pad[-num_validation_samples:]\n",
    "y_test=Y[-num_validation_samples:]\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loading Glove Vectors ...\n"
     ]
    }
   ],

# Next step is loading the Glove Vectors 
# The Code is for Creating Glove Embedding Vectors using pretrained glove vector

   "source": [
    "import os\n",
    "print(\"Loading Glove Vectors ...\")\n",
    "embeddings_index = {}\n",
    "EMBEDDING_DIM=300\n",
    "f = open(os.path.join('', 'glove.42B.300d.txt'), 'r', encoding=\"utf-8\")\n",
    "for line in f:\n",
    "    values = line.split()\n",
    "    word = values[0]\n",
    "    coefs = np.asarray(values[1:], dtype='float32')\n",
    "    embeddings_index[word] = coefs\n",
    "f.close()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Embedding Matrix Generated :  (8657, 300)\n"
     ]
    }
   ],

# How to Create word vectors from global set for the corpus

   "source": [
    "embedding_matrix = np.zeros((len(word_index) + 1, EMBEDDING_DIM))\n",
    "for word, i in word_index.items():\n",
    "    if word in embeddings_index.keys():\n",
    "        embedding_vector = embeddings_index[word]\n",
    "    if embedding_vector is not None:\n",
    "        # words not found in embedding index will be all-zeros.\n",
    "        embedding_matrix[i] = embedding_vector\n",
    "\n",
    "print(\"Embedding Matrix Generated : \", embedding_matrix.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],

# Defining Embedding layer for LSTM(Long Short Term Memory) model

   "source": [ 
    "embedding_layer = Embedding(len(word_index) + 1, EMBEDDING_DIM, weights=[embedding_matrix],\n",
    "                            input_length=max_length, trainable=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "embedding (Embedding)        (None, 50, 300)           2597100   \n",
      "_________________________________________________________________\n",
      "lstm (LSTM)                  (None, 32)                42624     \n",
      "_________________________________________________________________\n",
      "dense (Dense)                (None, 7)                 231       \n",
      "=================================================================\n",
 
# Shows the total parameters, trainable parameters and non-trinable parameters

      "Total params: 2,639,955\n",
      "Trainable params: 42,855\n",
      "Non-trainable params: 2,597,100\n",
      "_________________________________________________________________\n",
      "None\n"
     ]
    }
   ],

# Next step is defining the model

 "source": [
    "model = Sequential()\n",
    "model.add(embedding_layer)\n",
    "model.add(LSTM(units=32, dropout=0.2, recurrent_dropout=0.25))\n",
    "model.add(Dense(7, activation=\"softmax\"))\n",
    "model.compile(loss=\"categorical_crossentropy\", optimizer=\"adam\", metrics=[\"accuracy\"])\n",
    "print(model.summary())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "filepath = \"model.h5\"\n",
    "checkpoint = ModelCheckpoint(filepath, verbose=1, save_best_only=False, mode='auto')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/15\n",
      "192/192 [==============================] - ETA: 0s - loss: 1.9398 - accuracy: 0.1599\n",
      "Epoch 00001: saving model to model.h5\n",
      "192/192 [==============================] - 16s 86ms/step - loss: 1.9398 - accuracy: 0.1599 - val_loss: 1.9302 - val_accuracy: 0.1810\n",
      "Epoch 2/15\n",
      "191/192 [============================>.] - ETA: 0s - loss: 1.8084 - accuracy: 0.2515\n",
      "Epoch 00002: saving model to model.h5\n",
      "192/192 [==============================] - 16s 83ms/step - loss: 1.8079 - accuracy: 0.2516 - val_loss: 1.7715 - val_accuracy: 0.2948\n",
      "Epoch 3/15\n",
      "191/192 [============================>.] - ETA: 0s - loss: 1.6260 - accuracy: 0.3524\n",
      "Epoch 00003: saving model to model.h5\n",
      "192/192 [==============================] - 19s 98ms/step - loss: 1.6263 - accuracy: 0.3523 - val_loss: 1.5666 - val_accuracy: 0.3824\n",
      "Epoch 4/15\n",
      "192/192 [==============================] - ETA: 0s - loss: 1.5099 - accuracy: 0.4030\n",
      "Epoch 00004: saving model to model.h5\n",
      "192/192 [==============================] - 19s 100ms/step - loss: 1.5099 - accuracy: 0.4030 - val_loss: 1.4875 - val_accuracy: 0.4085\n",
      "Epoch 5/15\n",
      "191/192 [============================>.] - ETA: 0s - loss: 1.4228 - accuracy: 0.4418\n",
      "Epoch 00005: saving model to model.h5\n",
      "192/192 [==============================] - 19s 100ms/step - loss: 1.4225 - accuracy: 0.4417 - val_loss: 1.4613 - val_accuracy: 0.4301\n",
      "Epoch 6/15\n",
      "192/192 [==============================] - ETA: 0s - loss: 1.3642 - accuracy: 0.4727\n",
      "Epoch 00006: saving model to model.h5\n",
      "192/192 [==============================] - 21s 109ms/step - loss: 1.3642 - accuracy: 0.4727 - val_loss: 1.4280 - val_accuracy: 0.4451\n",
      "Epoch 7/15\n",
      "191/192 [============================>.] - ETA: 0s - loss: 1.3041 - accuracy: 0.4987\n",
      "Epoch 00007: saving model to model.h5\n",
      "192/192 [==============================] - 21s 112ms/step - loss: 1.3040 - accuracy: 0.4990 - val_loss: 1.3733 - val_accuracy: 0.4791\n",
      "Epoch 8/15\n",
      "191/192 [============================>.] - ETA: 0s - loss: 1.2611 - accuracy: 0.5178\n",
      "Epoch 00008: saving model to model.h5\n",
      "192/192 [==============================] - 21s 109ms/step - loss: 1.2607 - accuracy: 0.5181 - val_loss: 1.3681 - val_accuracy: 0.4954\n",
      "Epoch 9/15\n",
      "191/192 [============================>.] - ETA: 0s - loss: 1.2197 - accuracy: 0.5335\n",
      "Epoch 00009: saving model to model.h5\n",
      "192/192 [==============================] - 20s 103ms/step - loss: 1.2200 - accuracy: 0.5336 - val_loss: 1.3608 - val_accuracy: 0.4922\n",
      "Epoch 10/15\n",
      "191/192 [============================>.] - ETA: 0s - loss: 1.1840 - accuracy: 0.5484\n",
      "Epoch 00010: saving model to model.h5\n",
      "192/192 [==============================] - 22s 115ms/step - loss: 1.1841 - accuracy: 0.5480 - val_loss: 1.3298 - val_accuracy: 0.5000\n",
      "Epoch 11/15\n",
      "191/192 [============================>.] - ETA: 0s - loss: 1.1452 - accuracy: 0.5633\n",
      "Epoch 00011: saving model to model.h5\n",
      "192/192 [==============================] - 21s 109ms/step - loss: 1.1451 - accuracy: 0.5634 - val_loss: 1.3350 - val_accuracy: 0.5007\n",
      "Epoch 12/15\n",
      "191/192 [============================>.] - ETA: 0s - loss: 1.1254 - accuracy: 0.5823\n",
      "Epoch 00012: saving model to model.h5\n",
      "192/192 [==============================] - 21s 108ms/step - loss: 1.1259 - accuracy: 0.5822 - val_loss: 1.3033 - val_accuracy: 0.5405\n",
      "Epoch 13/15\n",
      "192/192 [==============================] - ETA: 0s - loss: 1.0873 - accuracy: 0.6116\n",
      "Epoch 00013: saving model to model.h5\n",
      "192/192 [==============================] - 22s 113ms/step - loss: 1.0873 - accuracy: 0.6116 - val_loss: 1.3352 - val_accuracy: 0.5405\n",
      "Epoch 14/15\n",
      "191/192 [============================>.] - ETA: 0s - loss: 1.0435 - accuracy: 0.6273\n",
      "Epoch 00014: saving model to model.h5\n",
      "192/192 [==============================] - 21s 107ms/step - loss: 1.0434 - accuracy: 0.6276 - val_loss: 1.2464 - val_accuracy: 0.5784\n",
      "Epoch 15/15\n",
      "192/192 [==============================] - ETA: 0s - loss: 1.0244 - accuracy: 0.6424\n",
      "Epoch 00015: saving model to model.h5\n",
      "192/192 [==============================] - 23s 119ms/step - loss: 1.0244 - accuracy: 0.6424 - val_loss: 1.2920 - val_accuracy: 0.5431\n",
      "Test accuracy: 0.54313725233078\n"
     ]

# The data

    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "filepath = \"model.h5\"\n",
    "checkpoint = ModelCheckpoint(filepath, verbose=1, save_best_only=False, mode='auto')\n",
    "callbacks_list = [checkpoint]\n",
    "\n",

# Training the model

    "history = model.fit(X_train_pad, y_train, validation_data=(X_test_pad, y_test), batch_size=32, epochs=15,callbacks=[callbacks_list])\n",
    "\n",
    "scores = model.evaluate(X_test_pad, y_test, verbose=0)\n",
    "print('Test accuracy:', scores[1])\n",
    "\n",
    "pyplot.plot(history.history['accuracy'], label='Training Accuracy')\n",
    "pyplot.plot(history.history['val_accuracy'], label='Validation Accuracy')\n",
    "\n",
    "pyplot.legend()\n",
    "pyplot.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],

# Serialize your ML model with Pickle to use later

 "filename = 'finalized_model.sav'\n",
    "pickle.dump(history, open(filename, 'wb'))\n",
    "\n",
    " \n",
    "# some time later...\n",
    " \n",

# Next Step Loading the model from disk

    "loaded_model = pickle.load(open(filename, 'rb'))\n",
    "result = loaded_model.score(X_test_pad, y_test)\n",
    "print(result)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n",
      "  0 0 0 0 0 0 0 0 0 0 0 0 0 0]]\n",
      "['when', 'i', 'enter', 'into', 'dark', 'room']\n",
      "[[  8   1 784 121 282 167   0   0   0   0   0   0   0   0   0   0   0   0\n",
      "    0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0\n",
      "    0   0   0   0   0   0   0   0   0   0   0   0   0   0]]\n"
     ]
    }
   ],

# Predicting unkown data

"source": [
    "\n",
    "line=\"when i enter into dark room\"\n",
    "line_matrix=np.zeros((1,50),dtype=int)\n",
    "print(line_matrix)\n",
    "words=line.split(\" \")\n",
    "print(words)\n",
    "i=0\n",
    "for w in words:\n",
    "    if w in word_index.keys():\n",
    "        line_matrix[0][i]=word_index[w]\n",
    "    i+=1\n",

# Line matrix as a input for LSTM layer for above text line

    "print(line_matrix)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.00634687 0.92215306 0.00659599 0.01825636 0.01560017 0.01115657\n",
      " 0.01989089]\n",
      "Emotion is fear\n"
     ]
    }
   ],

# Code for Predicting output on wnknown data

"source": [
    "output=model.predict(line_matrix,verbose=0)\n",
    "print(output[0])\n",
    "a=np.argmax(output[0])\n",
    "for k,v in encode.items():\n",
    "    if a==v:\n",
    "        print(\"Emotion is \" + str(k))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}

# C# files and implementations. 

# Echobot framework of C. How bot turns on Conversation using Dialog.
# There are controllers and deployment templates that are important. 
# Deployment Templaters necessary here are new-rg-parameters, preexisting-rg-parameters, template-with-new-rg, template-with-preexisting-rg

using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Bot.Builder;
using Microsoft.Bot.Builder.Dialogs;
using Microsoft.Bot.Schema;

namespace EchoBot1.Bots
{
    public class EchoBot<T> : ActivityHandler where T : Dialog

    {
        protected readonly Dialog Dialog;
        protected readonly BotState ConversationState;
        protected readonly BotState UserState;

        public EchoBot(ConversationState conversationState, UserState userState, T dialog1)
        {
            Dialog = dialog1;
            ConversationState = conversationState;
            UserState = userState;
        }



        protected override async Task OnMessageActivityAsync(ITurnContext<IMessageActivity> turnContext, CancellationToken cancellationToken)
        {
            await Dialog.RunAsync(turnContext, ConversationState.CreateProperty<DialogState>(nameof(DialogState)), cancellationToken);


        }
        public override async Task OnTurnAsync(ITurnContext turnContext, CancellationToken cancellationToken)
        {
            await base.OnTurnAsync(turnContext, cancellationToken);
            await ConversationState.SaveChangesAsync(turnContext, force: false, cancellationToken);
            await UserState.SaveChangesAsync(turnContext, force: false, cancellationToken);


        }

        protected override Task OnEndOfConversationActivityAsync(ITurnContext<IEndOfConversationActivity> turnContext, CancellationToken cancellationToken)
        {
            return base.OnEndOfConversationActivityAsync(turnContext, cancellationToken);
        }
    }
}




# Dialogues handle the conversational flow of our model. For predicting the emotions, PredictionEnginePool, EmotionPredictionDialog plays a very important role. 
# We have added Waterfall Dialog and guiven input as Prompt and Utterance.

using EchoBot1ML.Model;
using Microsoft.Bot.Builder;
using Microsoft.Bot.Builder.Dialogs;
using Microsoft.Extensions.ML;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;

namespace EchoBot1.Dialogues
{
    public class EmotionPredictionDialog: ComponentDialog
    {
        private readonly PredictionEnginePool<ModelInput, ModelOutput> _predictionEnginePool;

        public EmotionPredictionDialog(UserState userState, PredictionEnginePool<ModelInput, ModelOutput>predictionEnginePool) : base(nameof(EmotionPredictionDialog))
        {
            _predictionEnginePool = predictionEnginePool;
            var step = new WaterfallStep[]
            {
                QueryStepAsync,
                QueryStepAsyncc,
                FinishDialogAsync
            };

            AddDialog(new WaterfallDialog(nameof(WaterfallDialog),step));
            AddDialog(new TextPrompt(nameof(TextPrompt)));
            AddDialog(new TextPrompt(nameof(TextPrompt)));

            InitialDialogId = nameof(WaterfallDialog);

        }


        private static async Task<DialogTurnResult> QueryStepAsync(WaterfallStepContext stepContext, CancellationToken cancellationToken)
            {
            return await stepContext.PromptAsync(nameof(TextPrompt), new PromptOptions
            {
                Prompt = MessageFactory.Text("How are you doing?")
            });
        }

        private static async Task<DialogTurnResult> QueryStepAsyncc(WaterfallStepContext stepContext, CancellationToken cancellationToken)
        {
            stepContext.Values["Prompt"] = stepContext.Result;
            return await stepContext.PromptAsync(nameof(TextPrompt), new PromptOptions
            {
                Prompt = MessageFactory.Text("How was your day? Tell me about events of your day") 
            });
        }

        private async Task<DialogTurnResult> FinishDialogAsync(WaterfallStepContext stepContext, CancellationToken cancellationToken)
        {
            stepContext.Values["Utterance"] = stepContext.Result;
            var stepValues = stepContext.Values;

            var modelInput = new ModelInput
            {
                Prompt = (stepValues["Prompt"].ToString()),
                Utterance= (stepValues["Prompt"].ToString()),
            };

            var prediction = ConsumeModel.Predict(modelInput);
            await stepContext.Context.SendActivityAsync($"It feels like you are feeling {prediction.Prediction.ToString()} If I identify your emotion please type yes in chat bot ");
            return await stepContext.EndDialogAsync(stepContext.Values, cancellationToken: cancellationToken);
        }
    }
}


# Generated with Bot Builder V4 SDK Template for Visual Studio CoreBot v4.9.2. It is an ErrorHandler.

using Microsoft.Bot.Builder.Integration.AspNet.Core;
using Microsoft.Bot.Builder.TraceExtensions;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;

namespace EchoBot1
{
    public class AdapterWithErrorHandler : BotFrameworkHttpAdapter
    {
        public AdapterWithErrorHandler(IConfiguration configuration, ILogger<BotFrameworkHttpAdapter> logger)
            : base(configuration, logger)
        {
            OnTurnError = async (turnContext, exception) =>
            {
                // Log any leaked exception from the application.
                logger.LogError(exception, $"[OnTurnError] unhandled error : {exception.Message}");

                // Send a message to the user
                await turnContext.SendActivityAsync("The bot encountered an error or bug.");
                await turnContext.SendActivityAsync("To continue to run this bot, please fix the bot source code.");

                // Send a trace activity, which will be displayed in the Bot Framework Emulator
                await turnContext.TraceActivityAsync("OnTurnError Trace", exception.Message, "https://www.botframework.com/schemas/error", "TurnError");
            };
        }
    }
}


# The Startup file

using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.Bot.Builder;
using Microsoft.Bot.Builder.Integration.AspNet.Core;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;

using EchoBot1.Bots;
using EchoBot1ML.Model;
using Microsoft.Extensions.ML;
using EchoBot1.Dialogues;

namespace EchoBot1
{
    public class Startup
    {
        public Startup(IConfiguration configuration)
        {
            Configuration = configuration;
        }

        public IConfiguration Configuration { get; }

# This method gets called by the runtime. Use this method to add services to the container.

        public void ConfigureServices(IServiceCollection services)
        {
            services.AddControllers().AddNewtonsoftJson();

# Now Create the Bot Framework Adapter with error handling enabled.

            services.AddSingleton<IBotFrameworkHttpAdapter, AdapterWithErrorHandler>();

            services.AddSingleton<IStorage, MemoryStorage>();
            services.AddSingleton<ConversationState>();
            services.AddSingleton<UserState>();
            services.AddSingleton<EmotionPredictionDialog>();

# Now Create the bot as a transient. In this case the ASP Controller is expecting an IBot.

            services.AddTransient<IBot, EchoBot<EmotionPredictionDialog>>();

            services.AddPredictionEnginePool<ModelInput, ModelOutput>().FromFile("./MLModel.zip", watchForChanges: false);


        }

# This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
        {
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }

            app.UseDefaultFiles()
                .UseStaticFiles()
                .UseWebSockets()
                .UseRouting()
                .UseAuthorization()
                .UseEndpoints(endpoints =>
                {
                    endpoints.MapControllers();
                });

             app.UseHttpsRedirection();
        }
    }
}